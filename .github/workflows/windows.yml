name: Windows build

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
  
jobs:
  WindowsBuild:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4.1.7
    - name: Get latest commit
      run: |
        git clone https://${{ secrets.ASE_GITHUB_TOKEN }}@github.com/${{ secrets.MY_REPO_URL }} ${{ secrets.FILENAME }} --depth=1
        cd ${{ secrets.FILENAME }}
        git log -1 --pretty=format:"%H" > ../latest_commit.txt
        cd ..
        $latest_commit = (Get-Content "latest_commit.txt" | ForEach-Object { $_.Trim() }) -join ''
        $current_hash = (Get-Content "latestHash" | ForEach-Object { $_.Trim() }) -join ''
        if ($latest_commit -eq $current_hash) {
          Write-Output "Hashes are the same"
          Add-Content -Path $env:GITHUB_ENV -Value "hashes_are_same=true"
        } else {
          Write-Output "Hashes are different"
          Add-Content -Path $env:GITHUB_ENV -Value "hashes_are_same=false"
        }
    - name: Get Access Token using Refresh Token
      if: env.hashes_are_same == 'false'
      run: |
        $body = @{
            "client_id" = "${{ secrets.CLIENT_ID }}"
            "client_secret" = "${{ secrets.CLIENT_SECRET }}"
            "refresh_token" = "${{ secrets.REFRESH_TOKEN }}"
            "grant_type" = "refresh_token"
        }
        $response = Invoke-RestMethod -Uri "https://www.googleapis.com/oauth2/v4/token" -Body $body -Method POST
        Write-Output "::add-mask::$($response.access_token)"
        Add-Content -Path $env:GITHUB_ENV -Value "ACCESS_TOKEN=$($response.access_token)"
    - name: Check for and import your Google Drive cache
      if: env.hashes_are_same == 'false'
      run: |
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
        }
        $response = Invoke-RestMethod -Uri "https://www.googleapis.com/drive/v3/files" -Method Get -Headers $headers
        $cacheFile = $response.files | Where-Object { $_.name -eq "cache.zip" } | Select-Object -First 1
        if ($cacheFile) {
          Invoke-WebRequest -Uri "https://www.googleapis.com/drive/v3/files/$($cacheFile.id)?alt=media" -Headers $headers -OutFile "cache.zip"
          Expand-Archive -LiteralPath cache.zip -DestinationPath C:/
          Write-Output "::add-mask::$($cacheFile.id)"
          Add-Content -Path $env:GITHUB_ENV -Value "CACHE_FILEID=$($cacheFile.id)"
        } else {
          New-Item C:/cache -ItemType Directory
        }
    - uses: krdlab/setup-haxe@master
      if: env.hashes_are_same == 'false'
      with:
        haxe-version: 4.3.4
    - name: Install Haxelib
      if: env.hashes_are_same == 'false'
      run: |
        cd ${{ secrets.FILENAME }}
        haxelib setup C:/haxelib
        haxelib install hxcpp --quiet --global
        .\setup\windows.bat
    - name: Compile
      if: env.hashes_are_same == 'false'
      run: |
        cd ${{ secrets.FILENAME }}
        haxelib run lime build windows --app-version="4.0.0-${{ github.run_id }}" -useCache
    - name: Check latest Build file and get FileID
      if: env.hashes_are_same == 'false'
      run: |
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
        }
        $response = Invoke-RestMethod -Uri "https://www.googleapis.com/drive/v3/files" -Method Get -Headers $headers
        $ArtCrushFile = $response.files | Where-Object { $_.name -eq "ArtCrush.zip" } | Select-Object -First 1
        if ($ArtCrushFile) {
          Write-Output "::add-mask::$($ArtCrushFile.id)"
          Add-Content -Path $env:GITHUB_ENV -Value "UPLOADED_FILEID=$($ArtCrushFile.id)"
        }
    - name: Zip it and Upload Google Drive
      if: env.hashes_are_same == 'false'
      run: |
        Compress-Archive -Path ${{ secrets.FILENAME }}/export/release/windows/bin -DestinationPath ArtCrush.zip -Update
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
          "Content-Type" = "multipart/related; boundary=boundary"
        }
        $metadata = @{
          name="ArtCrush.zip"
        } | ConvertTo-Json
        
        $fileBytes = [System.IO.File]::ReadAllBytes("ArtCrush.zip");
        $fileEnc = [System.Text.Encoding]::GetEncoding('ISO-8859-1').GetString($fileBytes)
        $body = @"
        --boundary
        Content-Type: application/json; charset=UTF-8

        $metadata

        --boundary
        Content-Type: application/octet-stream
        Content-Disposition: form-data; name="file"; filename="ArtCrush.zip"

        $fileEnc

        --boundary--
        "@
        $fileId = "${{ env.UPLOADED_FILEID }}"
        $uri = if ($fileId) {
          "https://www.googleapis.com/upload/drive/v3/files/$fileId?uploadType=multipart"
        } else {
          "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart"
        }
        $method = if ($fileId) { "PATCH" } else { "POST" }
        
        $response = Invoke-RestMethod -Method $method -Headers $headers -Uri $uri -Body $body

        Invoke-RestMethod -Method POST -Headers @{"Authorization"="Bearer ${{ env.ACCESS_TOKEN }}"} -Uri "https://www.googleapis.com/drive/v3/files/${response.id}/permissions" -Body "{\"role\": \"reader\",\"type\": \"anyone\"}" | Out-Null
        if (-not $fileId) {
          Write-Output "::add-mask::$($response.id)"
          Add-Content -Path $env:GITHUB_ENV -Value "UPLOADED_FILEID=$($response.id)"
        }

    - name: Send Discord Webhook
      if: env.hashes_are_same == 'false'
      run: |
        Invoke-RestMethod -Method POST -Headers "Content-Type: application/json" -Uri ${{ secrets.WEBHOOK_URL }} -Body ${{ secrets.EMBED_CONTENT }} | Out-Null
        Invoke-RestMethod -Method POST -Headers "Content-Type: application/json" -Uri ${{ secrets.WEBHOOK_URL }} -Body "{\"content\":\"https://drive.google.com/file/d/${jsonData.id}/view?usp=sharing\"}" | Out-Null
    - name: Upload the last cache built
      if: env.hashes_are_same == 'false'
      run: |
        Compress-Archive -Path C:/cache -DestinationPath cache.zip -Update
        $headers = @{
          "Authorization" = "Bearer ${{ env.ACCESS_TOKEN }}"
          "Content-Type" = "multipart/related; boundary=boundary"
        }
        $metadata = @{
          name="cache.zip"
        } | ConvertTo-Json
        
        $fileBytes = [System.IO.File]::ReadAllBytes("cache.zip");
        $fileEnc = [System.Text.Encoding]::GetEncoding('ISO-8859-1').GetString($fileBytes)
        $body = @"
        --boundary
        Content-Type: application/json; charset=UTF-8

        $metadata

        --boundary
        Content-Type: application/octet-stream
        Content-Disposition: form-data; name="file"; filename="cache.zip"

        $fileEnc

        --boundary--
        "@
        if (${{ env.CACHE_FILEID }}) {
          Invoke-RestMethod -Method PATCH -Headers $headers -Uri "https://www.googleapis.com/upload/drive/v3/files/${{ env.CACHE_FILEID }}?uploadType=multipart" -Body $body | Out-Null
        } else {
          Invoke-RestMethod -Method POST -Headers $headers -Uri "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart" -Body $body | Out-Null
        }
    - name: Update latestHash in current repository
      if: env.hashes_are_same == 'false'
      run: |
        cd $GITHUB_WORKSPACE
        (Get-Content "latest_commit.txt" | ForEach-Object { $_.Trim() }) -join '' | Out-File -FilePath "latestHash" -Force
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add latestHash
        $current_date = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        git commit -m "Update latestHash at $current_date"
        git remote set-url origin https://${{ secrets.ASE_GITHUB_TOKEN }}@github.com/ArtCrush/_blank
        git push